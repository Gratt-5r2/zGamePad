// Supported with union (c) 2020 Union team
// Union HEADER file

namespace GOTHIC_ENGINE {
  struct zTHelpString {
    static Array<zTHelpString> HelpStrings;

    struct zTHelpString_Item {
      TSystemLangID LangID;
      string Text;
    };

    zTHelpString();

    string Name;
    Array<zTHelpString_Item> Items;
    void SetText( const string& text, const string& lang );
    string GetText();
    static void CreateString( const string& name, const string& text, const string& lang );
    static string GetString( const string& name );
  };



#define	JOY_UP            ArrowUp
#define	JOY_DOWN          ArrowDown
#define	JOY_LEFT          ArrowLeft
#define	JOY_RIGHT         ArrowRight
#define	JOY_MENU          ButtonMenu
#define	JOY_VIEW          ButtonView
#define	JOY_LSTICK        ButtonLeftStick
#define	JOY_RSTICK        ButtonRightStick
#define	JOY_LB            ButtonL1   
#define	JOY_RB            ButtonR1
#define	JOY_A             ButtonA
#define	JOY_B             ButtonB
#define	JOY_X             ButtonX
#define	JOY_Y             ButtonY
#define	JOY_LSTICK_LOWUP  GameWalk
#define	JOY_LSTICK_UP     GameForward
#define	JOY_LSTICK_DOWN   GameBackward
#define	JOY_LSTICK_LEFT   GameLeftStrafe
#define	JOY_LSTICK_RIGHT  GameRightStrafe
#define	JOY_RT            GamePunch
#define	JOY_LT            GameParade



  int GetCombinationKeyCode( string code ) {
#define CHECKCODE(x) if( code == #x ) return x
    CHECKCODE( JOY_UP );
    CHECKCODE( JOY_DOWN );
    CHECKCODE( JOY_LEFT );
    CHECKCODE( JOY_RIGHT );
    CHECKCODE( JOY_MENU );
    CHECKCODE( JOY_VIEW );
    CHECKCODE( JOY_LSTICK );
    CHECKCODE( JOY_RSTICK );
    CHECKCODE( JOY_LB );
    CHECKCODE( JOY_RB );
    CHECKCODE( JOY_A );
    CHECKCODE( JOY_B );
    CHECKCODE( JOY_X );
    CHECKCODE( JOY_Y );
    CHECKCODE( JOY_LSTICK_LOWUP );
    CHECKCODE( JOY_LSTICK_UP );
    CHECKCODE( JOY_LSTICK_DOWN );
    CHECKCODE( JOY_LSTICK_LEFT );
    CHECKCODE( JOY_LSTICK_RIGHT );
    CHECKCODE( JOY_RT );
    CHECKCODE( JOY_LT );
#undef CHECKCODE
    return None;
  }



  int GetEmulationKeyCode( string code ) {
#define CHECKCODE(x) if( code == #x ) return x
#define CHECKGAMECODE(x) if( code == #x ) return GetBinded( x )
    if( code.Upper().StartWith( "GAME_" ) ) {
      CHECKGAMECODE( GAME_LEFT );
      CHECKGAMECODE( GAME_RIGHT );
      CHECKGAMECODE( GAME_UP );
      CHECKGAMECODE( GAME_DOWN );
      CHECKGAMECODE( GAME_ACTION );
      CHECKGAMECODE( GAME_SLOW );
      CHECKGAMECODE( GAME_ACTION2 );
      CHECKGAMECODE( GAME_WEAPON );
      CHECKGAMECODE( GAME_SMOVE );
      CHECKGAMECODE( GAME_SMOVE2 );
      CHECKGAMECODE( GAME_SHIFT );
      CHECKGAMECODE( GAME_END );
      CHECKGAMECODE( GAME_INVENTORY );
      CHECKGAMECODE( GAME_LOOK );
      CHECKGAMECODE( GAME_SNEAK );
      CHECKGAMECODE( GAME_STRAFELEFT );
      CHECKGAMECODE( GAME_STRAFERIGHT );
      CHECKGAMECODE( GAME_SCREEN_STATUS );
      CHECKGAMECODE( GAME_SCREEN_LOG );
      CHECKGAMECODE( GAME_SCREEN_MAP );
      CHECKGAMECODE( GAME_LOOK_FP );
      CHECKGAMECODE( GAME_LOCK_TARGET );
      CHECKGAMECODE( GAME_PARADE );
      CHECKGAMECODE( GAME_ACTIONLEFT );
      CHECKGAMECODE( GAME_ACTIONRIGHT );
      CHECKGAMECODE( GAME_LAME_POTION );
      CHECKGAMECODE( GAME_LAME_HEAL );
    }

    CHECKCODE( MOUSE_DX );
    CHECKCODE( MOUSE_DY );
    CHECKCODE( MOUSE_UP );
    CHECKCODE( MOUSE_DOWN );
    CHECKCODE( MOUSE_LEFT );
    CHECKCODE( MOUSE_RIGHT );
    CHECKCODE( MOUSE_WHEELUP );
    CHECKCODE( MOUSE_WHEELDOWN );
    CHECKCODE( MOUSE_BUTTONLEFT );
    CHECKCODE( MOUSE_BUTTONRIGHT );
    CHECKCODE( MOUSE_BUTTONMID );
    CHECKCODE( MOUSE_XBUTTON1 );
    CHECKCODE( MOUSE_XBUTTON2 );
    CHECKCODE( MOUSE_XBUTTON3 );
    CHECKCODE( MOUSE_XBUTTON4 );
    CHECKCODE( MOUSE_XBUTTON5 );
    CHECKCODE( KEY_ESCAPE );
    CHECKCODE( KEY_1 );
    CHECKCODE( KEY_2 );
    CHECKCODE( KEY_3 );
    CHECKCODE( KEY_4 );
    CHECKCODE( KEY_5 );
    CHECKCODE( KEY_6 );
    CHECKCODE( KEY_7 );
    CHECKCODE( KEY_8 );
    CHECKCODE( KEY_9 );
    CHECKCODE( KEY_0 );
    CHECKCODE( KEY_MINUS );
    CHECKCODE( KEY_EQUALS );
    CHECKCODE( KEY_BACK );
    CHECKCODE( KEY_TAB );
    CHECKCODE( KEY_Q );
    CHECKCODE( KEY_W );
    CHECKCODE( KEY_E );
    CHECKCODE( KEY_R );
    CHECKCODE( KEY_T );
    CHECKCODE( KEY_Y );
    CHECKCODE( KEY_U );
    CHECKCODE( KEY_I );
    CHECKCODE( KEY_O );
    CHECKCODE( KEY_P );
    CHECKCODE( KEY_LBRACKET );
    CHECKCODE( KEY_RBRACKET );
    CHECKCODE( KEY_RETURN );
    CHECKCODE( KEY_LCONTROL );
    CHECKCODE( KEY_A );
    CHECKCODE( KEY_S );
    CHECKCODE( KEY_D );
    CHECKCODE( KEY_F );
    CHECKCODE( KEY_G );
    CHECKCODE( KEY_H );
    CHECKCODE( KEY_J );
    CHECKCODE( KEY_K );
    CHECKCODE( KEY_L );
    CHECKCODE( KEY_SEMICOLON );
    CHECKCODE( KEY_APOSTROPHE );
    CHECKCODE( KEY_GRAVE );
    CHECKCODE( KEY_LSHIFT );
    CHECKCODE( KEY_BACKSLASH );
    CHECKCODE( KEY_Z );
    CHECKCODE( KEY_X );
    CHECKCODE( KEY_C );
    CHECKCODE( KEY_V );
    CHECKCODE( KEY_B );
    CHECKCODE( KEY_N );
    CHECKCODE( KEY_M );
    CHECKCODE( KEY_COMMA );
    CHECKCODE( KEY_PERIOD );
    CHECKCODE( KEY_SLASH );
    CHECKCODE( KEY_RSHIFT );
    CHECKCODE( KEY_MULTIPLY );
    CHECKCODE( KEY_LMENU );
    CHECKCODE( KEY_SPACE );
    CHECKCODE( KEY_CAPITAL );
    CHECKCODE( KEY_F1 );
    CHECKCODE( KEY_F2 );
    CHECKCODE( KEY_F3 );
    CHECKCODE( KEY_F4 );
    CHECKCODE( KEY_F5 );
    CHECKCODE( KEY_F6 );
    CHECKCODE( KEY_F7 );
    CHECKCODE( KEY_F8 );
    CHECKCODE( KEY_F9 );
    CHECKCODE( KEY_F10 );
    CHECKCODE( KEY_NUMLOCK );
    CHECKCODE( KEY_SCROLL );
    CHECKCODE( KEY_NUMPAD7 );
    CHECKCODE( KEY_NUMPAD8 );
    CHECKCODE( KEY_NUMPAD9 );
    CHECKCODE( KEY_SUBTRACT );
    CHECKCODE( KEY_NUMPAD4 );
    CHECKCODE( KEY_NUMPAD5 );
    CHECKCODE( KEY_NUMPAD6 );
    CHECKCODE( KEY_ADD );
    CHECKCODE( KEY_NUMPAD1 );
    CHECKCODE( KEY_NUMPAD2 );
    CHECKCODE( KEY_NUMPAD3 );
    CHECKCODE( KEY_NUMPAD0 );
    CHECKCODE( KEY_DECIMAL );
    CHECKCODE( KEY_OEM_102 );
    CHECKCODE( KEY_F11 );
    CHECKCODE( KEY_F12 );
    CHECKCODE( KEY_F13 );
    CHECKCODE( KEY_F14 );
    CHECKCODE( KEY_F15 );
    CHECKCODE( KEY_KANA );
    CHECKCODE( KEY_ABNT_C1 );
    CHECKCODE( KEY_CONVERT );
    CHECKCODE( KEY_NOCONVERT );
    CHECKCODE( KEY_YEN );
    CHECKCODE( KEY_ABNT_C2 );
    CHECKCODE( KEY_NUMPADEQUALS );
    CHECKCODE( KEY_PREVTRACK );
    CHECKCODE( KEY_AT );
    CHECKCODE( KEY_COLON );
    CHECKCODE( KEY_UNDERLINE );
    CHECKCODE( KEY_KANJI );
    CHECKCODE( KEY_STOP );
    CHECKCODE( KEY_AX );
    CHECKCODE( KEY_UNLABELED );
    CHECKCODE( KEY_NEXTTRACK );
    CHECKCODE( KEY_NUMPADENTER );
    CHECKCODE( KEY_RCONTROL );
    CHECKCODE( KEY_MUTE );
    CHECKCODE( KEY_CALCULATOR );
    CHECKCODE( KEY_PLAYPAUSE );
    CHECKCODE( KEY_MEDIASTOP );
    CHECKCODE( KEY_VOLUMEDOWN );
    CHECKCODE( KEY_VOLUMEUP );
    CHECKCODE( KEY_WEBHOME );
    CHECKCODE( KEY_NUMPADCOMMA );
    CHECKCODE( KEY_DIVIDE );
    CHECKCODE( KEY_SYSRQ );
    CHECKCODE( KEY_RMENU );
    CHECKCODE( KEY_PAUSE );
    CHECKCODE( KEY_HOME );
    CHECKCODE( KEY_UP );
    CHECKCODE( KEY_PRIOR );
    CHECKCODE( KEY_LEFT );
    CHECKCODE( KEY_RIGHT );
    CHECKCODE( KEY_END );
    CHECKCODE( KEY_DOWN );
    CHECKCODE( KEY_NEXT );
    CHECKCODE( KEY_INSERT );
    CHECKCODE( KEY_DELETE );
    CHECKCODE( KEY_LWIN );
    CHECKCODE( KEY_RWIN );
    CHECKCODE( KEY_APPS );
    CHECKCODE( KEY_POWER );
    CHECKCODE( KEY_SLEEP );
    CHECKCODE( KEY_WAKE );
    CHECKCODE( KEY_WEBSEARCH );
    CHECKCODE( KEY_WEBFAVORITES );
    CHECKCODE( KEY_WEBREFRESH );
    CHECKCODE( KEY_WEBSTOP );
    CHECKCODE( KEY_WEBFORWARD );
    CHECKCODE( KEY_WEBBACK );
    CHECKCODE( KEY_MYCOMPUTER );
    CHECKCODE( KEY_MAIL );
    CHECKCODE( KEY_MEDIASELECT );
    CHECKCODE( KEY_BACKSPACE );
    CHECKCODE( KEY_NUMPADSTAR );
    CHECKCODE( KEY_LALT );
    CHECKCODE( KEY_CAPSLOCK );
    CHECKCODE( KEY_NUMPADMINUS );
    CHECKCODE( KEY_NUMPADPLUS );
    CHECKCODE( KEY_NUMPADPERIOD );
    CHECKCODE( KEY_NUMPADSLASH );
    CHECKCODE( KEY_RALT );
    CHECKCODE( KEY_UPARROW );
    CHECKCODE( KEY_PGUP );
    CHECKCODE( KEY_LEFTARROW );
    CHECKCODE( KEY_RIGHTARROW );
    CHECKCODE( KEY_DOWNARROW );
    CHECKCODE( KEY_PGDN );
#undef CHECKCODE
#undef CHECKGAMECODE
    return None;
  }



  LPCONDFUNC GetConditionFunction( string code ) {
#define CHECKCODE(x) if( code == #x ) return x
    CHECKCODE( Cond_FightMode );
    CHECKCODE( Cond_FightModeMelee );
    CHECKCODE( Cond_FightModeRange );
    CHECKCODE( Cond_FightModeMagic );
    CHECKCODE( Cond_CanShoot );
    CHECKCODE( Cond_CanSneaking );
    CHECKCODE( Cond_Diving );
    CHECKCODE( Cond_HasFocusVob );
    CHECKCODE( Cond_HasFocusNpc );
    CHECKCODE( Cond_TargetIsLocked );
    CHECKCODE( Cond_OnChooseWeapon );
    CHECKCODE( Cond_InventoryIsOpen );
    CHECKCODE( Cond_InTransformation );
    CHECKCODE( Cond_CanQuickPotionDrink );
    CHECKCODE( Cond_VideoIsOpen );
    CHECKCODE( Cond_CanLockTarget );
    CHECKCODE( Cond_G1 );
    CHECKCODE( Cond_G2 );
    CHECKCODE( Cond_IsDialogTop );
    CHECKCODE( Cond_IsDocumentTop );
    CHECKCODE( Cond_IsOverlayTop );
    CHECKCODE( Cond_IsMenuTop );
    CHECKCODE( Cond_OnSpellBook );
    CHECKCODE( Cond_IsPlayerTalking );
    CHECKCODE( Cond_InterfaceIsOpen );
#undef CHECKCODE
    return Null;
  }
}